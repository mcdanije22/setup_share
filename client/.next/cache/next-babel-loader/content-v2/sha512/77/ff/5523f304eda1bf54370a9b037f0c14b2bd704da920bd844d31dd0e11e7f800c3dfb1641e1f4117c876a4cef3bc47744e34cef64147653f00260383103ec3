{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshmcdaniel/Documents/work/repos/setup_share/pages/dashboard/[id].tsx\";\nimport { useEffect, useContext, useState } from \"react\";\nimport { UserContext } from \"../../utils/context/userContext\";\nimport styles from \"../../pageStyles/dashboard.module.scss\";\nimport DashboardLayout from \"../../components/Layout/DashboardLayout\";\nimport { Button, PageHeader } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { BaseAPI } from \"../../utils/constants/common\";\nimport axios from \"axios\";\nimport { pageAuthCheck } from \"../../utils/helperFunctions/pageAuthCheck\";\nimport ProjectsList from \"../../components/projectList/ProjectList\";\nexport default function Dashboard(props) {\n  const {\n    currentUser,\n    setUser\n  } = useContext(UserContext);\n  const {\n    userDashboardInfo\n  } = props;\n  const {\n    0: activeSetup,\n    1: setActiveSetup\n  } = useState();\n  useEffect(() => {\n    if (!currentUser) {\n      reload();\n    }\n  }, []);\n  useEffect(() => {//need for users who tries to view someone else's information\n    // authUserCheck();\n  }, []);\n\n  const authUserCheck = () => {\n    var _currentUser$user;\n\n    if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$user = currentUser.user) === null || _currentUser$user === void 0 ? void 0 : _currentUser$user.user_id) !== setUpInfo[0].user_id) {\n      var _currentUser$user2;\n\n      router.push(`/dashboard/${currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$user2 = currentUser.user) === null || _currentUser$user2 === void 0 ? void 0 : _currentUser$user2.user_id}`);\n    }\n  };\n\n  const reload = async () => {\n    try {\n      const response = await axios.get(`${BaseAPI}/user/usercontext`, {\n        withCredentials: true\n      });\n      const userInfo = await response.data;\n      setUser(userInfo);\n    } catch (error) {\n      return {\n        redirect: {\n          permanent: false,\n          destination: \"/login\"\n        }\n      };\n    }\n  }; // const getactiveSetup = async (id: string) =>{\n  //   const setupId = id;\n  // }\n\n\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: styles.dashboardContainer,\n      children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n        style: {\n          padding: \"1rem 0\"\n        },\n        title: \"Setups\",\n        extra: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          value: \"small\",\n          shape: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, \"2\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), \"New setup\"]\n        }, \"1\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProjectsList, {\n        projects: userDashboardInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\nexport const getServerSideProps = async context => {\n  var _authCheck$props;\n\n  const {\n    id\n  } = context.query;\n  const authCheck = await pageAuthCheck(context);\n\n  if ((_authCheck$props = authCheck.props) !== null && _authCheck$props !== void 0 && _authCheck$props.authStatus) {\n    try {\n      const response = await axios.get(`${BaseAPI}/user/dashboard/${id}`);\n      const userDashboardInfo = await response.data; //TODO if wrong userid provided need to redirect using cookie to correct page or to login\n\n      return {\n        props: userDashboardInfo\n      };\n    } catch (e) {\n      return {\n        redirect: {\n          permanent: false,\n          destination: \"/login\"\n        }\n      };\n    }\n  } else {\n    return {\n      redirect: {\n        permanent: false,\n        destination: \"/login\"\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/joshmcdaniel/Documents/work/repos/setup_share/pages/dashboard/[id].tsx"],"names":["useEffect","useContext","useState","UserContext","styles","DashboardLayout","Button","PageHeader","PlusOutlined","BaseAPI","axios","pageAuthCheck","ProjectsList","Dashboard","props","currentUser","setUser","userDashboardInfo","activeSetup","setActiveSetup","reload","authUserCheck","user","user_id","setUpInfo","router","push","response","get","withCredentials","userInfo","data","error","redirect","permanent","destination","console","log","dashboardContainer","padding","getServerSideProps","context","id","query","authCheck","authStatus","e"],"mappings":"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","sourcesContent":["import { useEffect, useContext, useState } from \"react\";\nimport { UserContext } from \"../../utils/context/userContext\";\nimport styles from \"../../pageStyles/dashboard.module.scss\";\nimport DashboardLayout from \"../../components/Layout/DashboardLayout\";\nimport {\n  Row,\n  Col,\n  Button,\n  PageHeader,\n  Typography,\n  Tabs,\n  Divider,\n  Switch,\n} from \"antd\";\nimport { ConsoleSqlOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { GetServerSideProps } from \"next\";\nimport { BaseAPI } from \"../../utils/constants/common\";\nimport axios from \"axios\";\nimport { pageAuthCheck } from \"../../utils/helperFunctions/pageAuthCheck\";\nimport ProjectsList from \"../../components/projectList/ProjectList\";\n\ninterface Props {\n  userDashboardInfo: Array<dashboardItem>;\n}\ninterface dashboardItem {\n  user_id: string;\n  username: string;\n  setup_id: string;\n  setup_title: string;\n  setup_description: string;\n  setup_type: string;\n  setup_created_date: Date;\n  created_screen_type: any;\n  image_id: string;\n  image_url: string;\n  image_position: string;\n  image_position_number: number;\n}\n\nexport default function Dashboard(props: Props) {\n  const { currentUser, setUser } = useContext<any>(UserContext);\n  const { userDashboardInfo } = props;\n  const [activeSetup, setActiveSetup] = useState();\n  useEffect(() => {\n    if (!currentUser) {\n      reload();\n    }\n  }, []);\n\n  useEffect(() => {\n    //need for users who tries to view someone else's information\n    // authUserCheck();\n  }, []);\n\n  const authUserCheck = () => {\n    if (currentUser?.user?.user_id !== setUpInfo[0].user_id) {\n      router.push(`/dashboard/${currentUser?.user?.user_id}`);\n    }\n  };\n\n  const reload = async () => {\n    try {\n      const response = await axios.get(`${BaseAPI}/user/usercontext`, {\n        withCredentials: true,\n      });\n      const userInfo = await response.data;\n      setUser(userInfo);\n    } catch (error) {\n      return {\n        redirect: {\n          permanent: false,\n          destination: \"/login\",\n        },\n      };\n    }\n  };\n  // const getactiveSetup = async (id: string) =>{\n  //   const setupId = id;\n\n  // }\n  console.log(props);\n  return (\n    <DashboardLayout>\n      <div id={styles.dashboardContainer}>\n        <PageHeader\n          style={{ padding: \"1rem 0\" }}\n          title=\"Setups\"\n          extra={[\n            <Button type=\"primary\" key=\"1\" value=\"small\" shape=\"round\">\n              <PlusOutlined key=\"2\" />\n              New setup\n            </Button>,\n          ]}\n        />\n        <ProjectsList projects={userDashboardInfo} />\n      </div>\n    </DashboardLayout>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const { id } = context.query;\n  const authCheck = await pageAuthCheck(context);\n  if (authCheck.props?.authStatus) {\n    try {\n      const response = await axios.get(`${BaseAPI}/user/dashboard/${id}`);\n      const userDashboardInfo = await response.data;\n      //TODO if wrong userid provided need to redirect using cookie to correct page or to login\n      return {\n        props: userDashboardInfo,\n      };\n    } catch (e) {\n      return {\n        redirect: {\n          permanent: false,\n          destination: \"/login\",\n        },\n      };\n    }\n  } else {\n    return {\n      redirect: {\n        permanent: false,\n        destination: \"/login\",\n      },\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}